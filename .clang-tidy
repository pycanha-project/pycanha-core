---
Checks: "*,
        -abseil-*,
        -altera-*,
        -android-*,
        -fuchsia-*,
        -google-*,
        -llvm*,
        -modernize-use-trailing-return-type,
        -zircon-*,
        -readability-else-after-return,
        -readability-static-accessed-through-instance,
        -readability-avoid-const-params-in-decls,
        -cppcoreguidelines-non-private-member-variables-in-classes,
        -misc-non-private-member-variables-in-classes,
        -cppcoreguidelines-avoid-magic-numbers,
        -readability-magic-numbers,
        -bugprone-easily-swappable-parameters,
        -bugprone-misplaced-widening-cast,
        -bugprone-implicit-widening-of-multiplication-result
"
# Because we mix in many places uint32_t and size_t (uint64_t), for
# example, in std::vector and triangles and points indices,
# we need to disable these checks to avoid been too verbose 
# using static_cast<uint32_t> or static_cast<size_t> in many places:
#
# bugprone-misplaced-widening-cast
# bugprone-implicit-widening-of-multiplication-result

WarningsAsErrors: ''
HeaderFilterRegex: '^(?:.*/pycanha-core/pycanha-core/(?:include|src)/.*|.*/pycanha-core/test/.*|.*/pycanha-core/examples/.*)$'
CheckOptions:
  - key: 'bugprone-argument-comment.StrictMode'
    value: 'true'
  # Prefer using enum classes with 2 values for parameters instead of bools
  - key: 'bugprone-argument-comment.CommentBoolLiterals'
    value: 'true'
  - key: 'bugprone-misplaced-widening-cast.CheckImplicitCasts'
    value: 'true'
  - key: 'bugprone-sizeof-expression.WarnOnSizeOfIntegerExpression'
    value: 'true'
  - key: 'bugprone-suspicious-string-compare.WarnOnLogicalNotComparison'
    value: 'true'
  - key: 'readability-simplify-boolean-expr.ChainedConditionalReturn'
    value: 'true'
  - key: 'readability-simplify-boolean-expr.ChainedConditionalAssignment'
    value: 'true'
  - key: 'readability-uniqueptr-delete-release.PreferResetCall'
    value: 'true'
  - key: 'cppcoreguidelines-init-variables.MathHeader'
    value: '<cmath>'
  - key: 'cppcoreguidelines-narrowing-conversions.PedanticMode'
    value: 'true'
  - key: 'readability-else-after-return.WarnOnUnfixable'
    value: 'true'
  - key: 'readability-else-after-return.WarnOnConditionVariables'
    value: 'true'
  - key: 'readability-inconsistent-declaration-parameter-name.Strict'
    value: 'true'
  - key: 'readability-qualified-auto.AddConstToQualified'
    value: 'true'
  - key: 'readability-redundant-access-specifiers.CheckFirstDeclaration'
    value: 'true'

  # Identifier styles
  - key: 'readability-identifier-naming.AbstractClassCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.ClassCase'
    value: 'CamelCase'

  - key: 'readability-identifier-naming.EnumCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.EnumConstantCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.ScopedEnumConstantCase'
    value: 'UPPER_CASE'

  - key: 'readability-identifier-naming.FunctionCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.GlobalFunctionCase'
    value: 'lower_case'

  # All methods (including static) -> snake_case, no prefixes
  - key: 'readability-identifier-naming.MethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.MethodPrefix'
    value: ''
  - key: 'readability-identifier-naming.PublicMethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.PublicMethodPrefix'
    value: ''
  - key: 'readability-identifier-naming.ProtectedMethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ProtectedMethodPrefix'
    value: ''
  - key: 'readability-identifier-naming.PrivateMethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.PrivateMethodPrefix'
    value: ''

  # Static member functions (class methods) -> snake_case, no prefixes
  - key: 'readability-identifier-naming.ClassMethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ClassMethodPrefix'
    value: ''

  # constexpr functions/methods/variables -> snake_case
  - key: 'readability-identifier-naming.ConstexprFunctionCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ConstexprMethodCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ConstexprVariableCase'
    value: 'lower_case'
  # Don't enforce lower_case in constexpr variables starting with LIB
  - key: 'readability-identifier-naming.ConstexprVariableIgnoredRegexp'
    value: '^LIB.*'

  # Namespaces and aliases
  - key: 'readability-identifier-naming.NamespaceCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.InlineNamespaceCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.TypeAliasCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TypedefCase'
    value: 'lower_case'

  # Templates
  - key: 'readability-identifier-naming.TemplateParameterCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TemplateTemplateParameterCase'
    value: 'CamelCase'
  - key: 'readability-identifier-naming.TypeTemplateParameterCase'
    value: 'CamelCase'
  # C++20 bug workaround
  - key: 'readability-identifier-naming.TypeTemplateParameterIgnoredRegexp'
    value: 'expr-type'

  # Variables and members -> snake_case
  - key: 'readability-identifier-naming.VariableCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.GlobalVariableCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.GlobalPointerCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.LocalVariableCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.LocalPointerCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.MemberCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ClassMemberCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.PublicMemberCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ProtectedMemberCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.PrivateMemberCase'
    value: 'lower_case'

  # Keep leading underscore for private/protected DATA MEMBERS only
  - key: 'readability-identifier-naming.PrivateMemberPrefix'
    value: '_'
  - key: 'readability-identifier-naming.ProtectedMemberPrefix'
    value: '_'

  # Pointers/consts (keep snake_case)
  - key: 'readability-identifier-naming.ConstantCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.GlobalConstantCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.StaticConstantCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ConstantMemberCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ConstantParameterCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ConstantPointerParameterCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.PointerParameterCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.GlobalConstantPointerCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.StaticVariableCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.LocalConstantCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.LocalConstantPointerCase'
    value: 'lower_case'

  # Short-name leniency
  - key: 'readability-identifier-naming.LocalVariableIgnoredRegexp'
    value: '[a-zA-Z0-9_]{1,2}'
  - key: 'readability-identifier-length.MinimumVariableNameLength'
    value: '1'
  - key: 'readability-identifier-length.MinimumParameterNameLength'
    value: '1'
  - key: 'readability-identifier-length.MinimumLoopCounterNameLength'
    value: '1'

  # Macros & unions
  - key: 'readability-identifier-naming.MacroDefinitionCase'
    value: 'UPPER_CASE'
  - key: 'readability-identifier-naming.UnionCase'
    value: 'lower_case'
  - key: 'readability-identifier-naming.ValueTemplateParameterCase'
    value: 'CamelCase'

  # SparseMatrix usage is misdetected
  - key: misc-include-cleaner.IgnoreHeaders
    value: 'Eigen/.*'
...
